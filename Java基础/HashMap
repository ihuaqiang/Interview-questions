1.HashMap的结构和底层原理？

HashMap是我们常用的数据结构，由数组和链表和红黑树构成的数据结构。

当添加元素的时候，会通过哈希值和数组长度计算下标来定位该元素应该put的位置，为了使元素分布均匀会使用高位运算，
取模运算计算出index，然后将该元素添加进去，理想状态下是均匀的添加到数组中，但问题是不可能达到这样的理想状态，
这时候就会产生Hash冲突。
此时就产生了第二种数据结构-链表，冲突的元素会在该元素处以链表的形式保存。

当链表的长度过长时，查询效率会降低，时间复杂度可能达到O(n)级别，而数组的查询时间复杂度仅为O(1)

此时，就引出了第三种数据结构-红黑树，红黑树是一颗接近于平衡的二叉树，其查询复杂度为O(logn),远远比链表的查询效率高。
但是链表长度不到一定的阈值，直接使用红黑树代替链表是不行的，因为红黑树的自身维护代价也是比较高的，每插入一个元素都
可能打破红黑树的平衡性，这就需要每时每刻对红黑树再平衡(左旋，右旋，重新着色)


2.HashMap的存取原理？
HashMap在存数据的时候是基于Hash的原理，当调用put(key,value)方法的时候，会先对键key调用key.hashcode()方法，
根据方法返回hashcode来找bucket的位置来存Node对象。
https://www.cnblogs.com/kubidemanong/p/9113785.html